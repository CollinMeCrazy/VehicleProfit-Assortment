#BlueJ class context
comment0.target=Boat
comment0.text=\r\n\ Class\ Boat\ used\ as\ subclass\ of\ Class\ Vehicle\ \r\n\r\n\ @author\ Collins\ Ramsey\r\n\ @version\ 11/9/2022\ @\ 5\:43\ pm\r\n
comment1.params=
comment1.target=Boat()
comment1.text=\r\n\ Standard\ Constructor\ for\ objects\ of\ class\ Boat\r\n
comment2.params=destination\ weight\ income
comment2.target=Boat(java.lang.String,\ double,\ double)
comment2.text=\r\n\ 2nd\ Constructor\ for\ objects\ of\ class\ Boat,\ does\ some\ math\ with\ incoming\ weight\ to\ calculate\ crew\ members\r\n\ \r\n\ @param\ String\r\n\ @param\ double\r\n
comment3.params=
comment3.target=int\ getCrew()
comment3.text=\r\n\ Method\ getCrew\ returns\ this.crew\ as\ an\ int\r\n\r\n\ @param\ \ none\r\n\ @return\ int\r\n
comment4.params=
comment4.target=double\ calculateVehicleProfit()
comment4.text=\r\n\ Method\ calculateVehicleProfit\ overrides\ abstract\ version\ in\ Class\ Vehicle\ and\ is\ specific\r\n\ to\ this\ subclass\ \r\n\r\n\ @param\ \ none\r\n\ @return\ double\r\n
comment5.params=
comment5.target=void\ addToTotalProfit()
comment5.text=\r\n\ Method\ addToTotalProfit\ calls\ on\ calculateVehicleProfit\ in\ this\ subclass\ and\ then\ calls\ on\ the\ Class\ Vehicle\r\n\ method\ setRevenue\ to\ add\ to\ the\ total\ profit\r\n\r\n\ @param\ \ none\r\n\ @return\ nothing\r\n
numComments=6
